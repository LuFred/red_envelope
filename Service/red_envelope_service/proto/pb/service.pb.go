// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package red_envelope

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RedEnvelope service

type RedEnvelopeClient interface {
	// 查询银行卡余额
	GetCardBalance(ctx context.Context, in *GetCardBalanceRequest, opts ...grpc.CallOption) (*GetCardBalanceReply, error)
	// 创建红包
	CreateRede(ctx context.Context, in *CreateRedeRequest, opts ...grpc.CallOption) (*CreateRedeReply, error)
	// 创建红包领取记录
	CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*CreateRecordReply, error)
	// 根据用户id查询红包记录
	GetRecordByUID(ctx context.Context, in *GetRecordByUIDRequest, opts ...grpc.CallOption) (*GetRecordByUIDReply, error)
	// 修改用户个人余额
	UpdateBalanceByUID(ctx context.Context, in *UpdateBalanceByUIDRequest, opts ...grpc.CallOption) (*UpdateBalanceByUIDReply, error)
	// 查询指定用户的余额
	GetBalanceByUID(ctx context.Context, in *GetBalanceByUIDRequest, opts ...grpc.CallOption) (*GetBalanceByUIDReply, error)
}

type redEnvelopeClient struct {
	cc *grpc.ClientConn
}

func NewRedEnvelopeClient(cc *grpc.ClientConn) RedEnvelopeClient {
	return &redEnvelopeClient{cc}
}

func (c *redEnvelopeClient) GetCardBalance(ctx context.Context, in *GetCardBalanceRequest, opts ...grpc.CallOption) (*GetCardBalanceReply, error) {
	out := new(GetCardBalanceReply)
	err := grpc.Invoke(ctx, "/red_envelope.RedEnvelope/GetCardBalance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redEnvelopeClient) CreateRede(ctx context.Context, in *CreateRedeRequest, opts ...grpc.CallOption) (*CreateRedeReply, error) {
	out := new(CreateRedeReply)
	err := grpc.Invoke(ctx, "/red_envelope.RedEnvelope/CreateRede", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redEnvelopeClient) CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*CreateRecordReply, error) {
	out := new(CreateRecordReply)
	err := grpc.Invoke(ctx, "/red_envelope.RedEnvelope/CreateRecord", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redEnvelopeClient) GetRecordByUID(ctx context.Context, in *GetRecordByUIDRequest, opts ...grpc.CallOption) (*GetRecordByUIDReply, error) {
	out := new(GetRecordByUIDReply)
	err := grpc.Invoke(ctx, "/red_envelope.RedEnvelope/GetRecordByUID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redEnvelopeClient) UpdateBalanceByUID(ctx context.Context, in *UpdateBalanceByUIDRequest, opts ...grpc.CallOption) (*UpdateBalanceByUIDReply, error) {
	out := new(UpdateBalanceByUIDReply)
	err := grpc.Invoke(ctx, "/red_envelope.RedEnvelope/UpdateBalanceByUID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redEnvelopeClient) GetBalanceByUID(ctx context.Context, in *GetBalanceByUIDRequest, opts ...grpc.CallOption) (*GetBalanceByUIDReply, error) {
	out := new(GetBalanceByUIDReply)
	err := grpc.Invoke(ctx, "/red_envelope.RedEnvelope/GetBalanceByUID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RedEnvelope service

type RedEnvelopeServer interface {
	// 查询银行卡余额
	GetCardBalance(context.Context, *GetCardBalanceRequest) (*GetCardBalanceReply, error)
	// 创建红包
	CreateRede(context.Context, *CreateRedeRequest) (*CreateRedeReply, error)
	// 创建红包领取记录
	CreateRecord(context.Context, *CreateRecordRequest) (*CreateRecordReply, error)
	// 根据用户id查询红包记录
	GetRecordByUID(context.Context, *GetRecordByUIDRequest) (*GetRecordByUIDReply, error)
	// 修改用户个人余额
	UpdateBalanceByUID(context.Context, *UpdateBalanceByUIDRequest) (*UpdateBalanceByUIDReply, error)
	// 查询指定用户的余额
	GetBalanceByUID(context.Context, *GetBalanceByUIDRequest) (*GetBalanceByUIDReply, error)
}

func RegisterRedEnvelopeServer(s *grpc.Server, srv RedEnvelopeServer) {
	s.RegisterService(&_RedEnvelope_serviceDesc, srv)
}

func _RedEnvelope_GetCardBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedEnvelopeServer).GetCardBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/red_envelope.RedEnvelope/GetCardBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedEnvelopeServer).GetCardBalance(ctx, req.(*GetCardBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedEnvelope_CreateRede_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRedeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedEnvelopeServer).CreateRede(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/red_envelope.RedEnvelope/CreateRede",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedEnvelopeServer).CreateRede(ctx, req.(*CreateRedeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedEnvelope_CreateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedEnvelopeServer).CreateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/red_envelope.RedEnvelope/CreateRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedEnvelopeServer).CreateRecord(ctx, req.(*CreateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedEnvelope_GetRecordByUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordByUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedEnvelopeServer).GetRecordByUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/red_envelope.RedEnvelope/GetRecordByUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedEnvelopeServer).GetRecordByUID(ctx, req.(*GetRecordByUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedEnvelope_UpdateBalanceByUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBalanceByUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedEnvelopeServer).UpdateBalanceByUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/red_envelope.RedEnvelope/UpdateBalanceByUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedEnvelopeServer).UpdateBalanceByUID(ctx, req.(*UpdateBalanceByUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedEnvelope_GetBalanceByUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceByUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedEnvelopeServer).GetBalanceByUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/red_envelope.RedEnvelope/GetBalanceByUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedEnvelopeServer).GetBalanceByUID(ctx, req.(*GetBalanceByUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RedEnvelope_serviceDesc = grpc.ServiceDesc{
	ServiceName: "red_envelope.RedEnvelope",
	HandlerType: (*RedEnvelopeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCardBalance",
			Handler:    _RedEnvelope_GetCardBalance_Handler,
		},
		{
			MethodName: "CreateRede",
			Handler:    _RedEnvelope_CreateRede_Handler,
		},
		{
			MethodName: "CreateRecord",
			Handler:    _RedEnvelope_CreateRecord_Handler,
		},
		{
			MethodName: "GetRecordByUID",
			Handler:    _RedEnvelope_GetRecordByUID_Handler,
		},
		{
			MethodName: "UpdateBalanceByUID",
			Handler:    _RedEnvelope_UpdateBalanceByUID_Handler,
		},
		{
			MethodName: "GetBalanceByUID",
			Handler:    _RedEnvelope_GetBalanceByUID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xcf, 0x4a, 0xc4, 0x30,
	0x18, 0xc4, 0x3d, 0x88, 0x87, 0xcf, 0x5d, 0x85, 0x1c, 0x17, 0x64, 0xd9, 0x55, 0xf1, 0xd6, 0x83,
	0xbe, 0x41, 0xab, 0x14, 0x2f, 0x1e, 0x8a, 0xbd, 0x08, 0x22, 0xb1, 0x19, 0x45, 0xa8, 0x4d, 0x4c,
	0x62, 0xa1, 0xaf, 0xe5, 0x13, 0x8a, 0x4d, 0x83, 0x0d, 0xfd, 0x77, 0xfd, 0x66, 0xe6, 0x37, 0x61,
	0x08, 0xad, 0x0d, 0x74, 0xfd, 0x51, 0x20, 0x52, 0x5a, 0x5a, 0xc9, 0x56, 0x1a, 0xe2, 0x05, 0x55,
	0x8d, 0x52, 0x2a, 0x6c, 0xd6, 0x9f, 0x30, 0x86, 0xbf, 0x77, 0xe2, 0xf5, 0xcf, 0x21, 0x1d, 0x67,
	0x10, 0x77, 0x9d, 0xcc, 0x9e, 0xe8, 0x24, 0x85, 0x4d, 0xb8, 0x16, 0x31, 0x2f, 0x79, 0x55, 0x80,
	0x9d, 0x47, 0xfd, 0x7c, 0x14, 0xaa, 0x19, 0xbe, 0xbe, 0x61, 0xec, 0x66, 0x37, 0x6f, 0x52, 0x65,
	0xb3, 0x3f, 0x60, 0x0f, 0x44, 0x89, 0x06, 0xb7, 0xc8, 0x20, 0xc0, 0xb6, 0x61, 0xe4, 0x5f, 0xf1,
	0xcc, 0xb3, 0x69, 0x83, 0xe3, 0x3d, 0xd2, 0xca, 0x1f, 0x0b, 0xa9, 0x05, 0xdb, 0x8d, 0x07, 0xfe,
	0x34, 0xcf, 0xdc, 0xce, 0x59, 0x1c, 0xd5, 0x2d, 0xe0, 0x6e, 0x71, 0x93, 0xdf, 0xdf, 0x8e, 0x2c,
	0xd0, 0x53, 0xa7, 0x17, 0x08, 0x4c, 0x8e, 0xfd, 0x46, 0x2c, 0x57, 0x82, 0x5b, 0x74, 0xcb, 0x38,
	0xfe, 0x55, 0x18, 0x1d, 0x3a, 0x7c, 0xc7, 0xe5, 0xb2, 0xd1, 0xf5, 0x3c, 0xd3, 0x69, 0x0a, 0x1b,
	0x94, 0x5c, 0x0c, 0xde, 0x37, 0xd6, 0xb0, 0x5f, 0x70, 0xb5, 0xf8, 0xd7, 0xa3, 0xf6, 0xef, 0xdc,
	0xfc, 0x06, 0x00, 0x00, 0xff, 0xff, 0xad, 0xb7, 0xe3, 0x69, 0x69, 0x02, 0x00, 0x00,
}
